# Generated by Django 2.0.5 on 2018-05-07 23:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.IntegerField(primary_key=True, serialize=False)),
                ('customer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_key', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'customer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dnasequence',
            fields=[
                ('dna_id', models.IntegerField(primary_key=True, serialize=False)),
                ('sequence', models.CharField(blank=True, max_length=9999, null=True)),
                ('sequence_no', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'dnasequence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logcustomer',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('customer_id', models.IntegerField(blank=True, null=True)),
                ('customer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_key', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'logcustomer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logdnasequence',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('dna_id', models.IntegerField(blank=True, null=True)),
                ('sequence', models.CharField(blank=True, max_length=9999, null=True)),
                ('sequence_no', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'logdnasequence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logmeasurement',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('measurement_id', models.IntegerField(blank=True, null=True)),
                ('extraction_method', models.CharField(blank=True, max_length=255, null=True)),
                ('maldi_matrix', models.CharField(blank=True, max_length=255, null=True)),
                ('operator', models.CharField(blank=True, max_length=255, null=True)),
                ('maldi_run', models.CharField(blank=True, max_length=255, null=True)),
                ('changes_of_types', models.CharField(blank=True, max_length=255, null=True)),
                ('mass', models.FloatField(blank=True, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'logmeasurement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logmeasuringdevice',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('md_id', models.IntegerField(blank=True, null=True)),
                ('instrument', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
                ('fkeymeasurement', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logmeasuringdevice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logmsp',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('msp_id', models.IntegerField(blank=True, null=True)),
                ('msp_name', models.CharField(blank=True, max_length=255, null=True)),
                ('msp_id_db7311', models.CharField(blank=True, max_length=255, null=True)),
                ('change_since_version', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'logmsp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logspeciesgenus',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('species_id', models.IntegerField(blank=True, null=True)),
                ('gram_information', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('oxygen', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'logspeciesgenus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logstrain',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('strain_id', models.IntegerField(blank=True, null=True)),
                ('strain_name', models.CharField(blank=True, max_length=255, null=True)),
                ('growing_conditions', models.CharField(blank=True, max_length=255, null=True)),
                ('method_of_identification_key', models.CharField(blank=True, max_length=255, null=True)),
                ('method_of_identification', models.CharField(blank=True, max_length=255, null=True)),
                ('conserve', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_submission', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
                ('fkeyspeciesgenus', models.IntegerField(blank=True, null=True)),
                ('fkeymsp', models.IntegerField(blank=True, null=True)),
                ('fkeycustomer', models.IntegerField(blank=True, null=True)),
                ('fkeysequence', models.IntegerField(blank=True, null=True)),
                ('fkeymeasurement', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logstrain',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logsynonym',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=1)),
                ('stamp', models.DateTimeField()),
                ('synonym_id', models.IntegerField(blank=True, null=True)),
                ('synonym_name', models.CharField(blank=True, max_length=255, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('matching_hints_metadata', models.CharField(blank=True, max_length=255, null=True)),
                ('ivd', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'logsynonym',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('measurement_id', models.IntegerField(primary_key=True, serialize=False)),
                ('extraction_method', models.CharField(blank=True, max_length=255, null=True)),
                ('maldi_matrix', models.CharField(blank=True, max_length=255, null=True)),
                ('operator', models.CharField(blank=True, max_length=255, null=True)),
                ('maldi_run', models.CharField(blank=True, max_length=255, null=True)),
                ('changes_of_types', models.CharField(blank=True, max_length=255, null=True)),
                ('mass', models.FloatField(blank=True, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'measurement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measuringdevice',
            fields=[
                ('md_id', models.IntegerField(primary_key=True, serialize=False)),
                ('instrument', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'measuringdevice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Msp',
            fields=[
                ('msp_id', models.IntegerField(primary_key=True, serialize=False)),
                ('msp_name', models.CharField(blank=True, max_length=255, null=True)),
                ('msp_id_db7311', models.CharField(blank=True, max_length=255, null=True)),
                ('change_since_version', models.CharField(blank=True, max_length=255, null=True)),
                ('fkeymeasurement', models.IntegerField(blank=True, null=True)),
                ('fkeysynonym', models.IntegerField(blank=True, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'msp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Speciesgenus',
            fields=[
                ('species_id', models.IntegerField(primary_key=True, serialize=False)),
                ('gram_information', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('oxygen', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'speciesgenus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Strain',
            fields=[
                ('strain_id', models.IntegerField(primary_key=True, serialize=False)),
                ('strain_name', models.CharField(blank=True, max_length=255, null=True)),
                ('growing_conditions', models.CharField(blank=True, max_length=255, null=True)),
                ('method_of_identification_key', models.CharField(blank=True, max_length=255, null=True)),
                ('method_of_identification', models.CharField(blank=True, max_length=255, null=True)),
                ('conserve', models.CharField(blank=True, max_length=255, null=True)),
                ('sample_submission', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'strain',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('synonym_id', models.IntegerField(primary_key=True, serialize=False)),
                ('synonym_name', models.CharField(blank=True, max_length=255, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('matching_hints_metadata', models.CharField(blank=True, max_length=255, null=True)),
                ('ivd', models.CharField(blank=True, max_length=255, null=True)),
                ('db_version', models.CharField(blank=True, db_column='DB_Version', max_length=255, null=True)),
            ],
            options={
                'db_table': 'synonym',
                'managed': False,
            },
        ),
    ]
